#
# PySNMP MIB module POLYGON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/vla/ArrestedDevelopment/pygwarts/development/filch/POLYGON-MIB.mib
# Produced by pysmi-0.3.4 at Wed Jul 26 09:25:18 2023
# On host pcfrn3 platform Linux version 5.19.0-50-generic by user vla
# Using Python version 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ds1, = mibBuilder.importSymbols("DS1-MIB", "ds1")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
rs232, = mibBuilder.importSymbols("RS-232-MIB", "rs232")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, IpAddress, Unsigned32, ObjectIdentity, ModuleIdentity, Gauge32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, enterprises, iso, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Gauge32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "enterprises", "iso", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
polygon = ModuleIdentity((1, 3, 6, 1, 4, 1, 14885))
polygon.setRevisions(('2008-10-15 10:00', '2008-09-19 12:00', '2008-09-11 16:00', '2008-07-02 17:00', '2008-02-20 14:00', '2007-05-01 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: polygon.setRevisionsDescriptions(('Add polyCom-300U-1GT OBJECT-TYPE', 'Add fake IMPORTS ds1 and rs232 - for autoimport DS1-MIB and RS-232-MIB', 'Add polyCom-741 OBJECT-TYPE', 'Checking MIB syntax', 'Updated version', 'First version',))
if mibBuilder.loadTexts: polygon.setLastUpdated('200810151000Z')
if mibBuilder.loadTexts: polygon.setOrganization('JCS SIE Polygon ')
if mibBuilder.loadTexts: polygon.setContactInfo('Post code 450000, Ufa-Center, Karl Marks st. 37, bild 1, 5 flow')
if mibBuilder.loadTexts: polygon.setDescription('The MIB module to describe Polycom appartures')
polygonDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 200))
polyCom_200M = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 1), ObjectIdentifier()).setLabel("polyCom-200M")
if mibBuilder.loadTexts: polyCom_200M.setStatus('current')
if mibBuilder.loadTexts: polyCom_200M.setDescription('polyCom-200M device ObjectID')
polyCom_200MK = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 2), ObjectIdentifier()).setLabel("polyCom-200MK")
if mibBuilder.loadTexts: polyCom_200MK.setStatus('current')
if mibBuilder.loadTexts: polyCom_200MK.setDescription('polyCom-200MK device ObjectID')
polyCom_300M = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 3), ObjectIdentifier()).setLabel("polyCom-300M")
if mibBuilder.loadTexts: polyCom_300M.setStatus('current')
if mibBuilder.loadTexts: polyCom_300M.setDescription('polyCom-300M device ObjectID')
polyCom_200T = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 4), ObjectIdentifier()).setLabel("polyCom-200T")
if mibBuilder.loadTexts: polyCom_200T.setStatus('current')
if mibBuilder.loadTexts: polyCom_200T.setDescription('polyCom-200T device ObjectID')
polyCom_300T = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 5), ObjectIdentifier()).setLabel("polyCom-300T")
if mibBuilder.loadTexts: polyCom_300T.setStatus('current')
if mibBuilder.loadTexts: polyCom_300T.setDescription('polyCom-300T device ObjectID')
rackControllerBlock_U_1 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 6), ObjectIdentifier()).setLabel("rackControllerBlock-U-1")
if mibBuilder.loadTexts: rackControllerBlock_U_1.setStatus('current')
if mibBuilder.loadTexts: rackControllerBlock_U_1.setDescription('rackControllerBlock-U-1 device ObjectID')
polyCom_300U = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 7), ObjectIdentifier()).setLabel("polyCom-300U")
if mibBuilder.loadTexts: polyCom_300U.setStatus('current')
if mibBuilder.loadTexts: polyCom_300U.setDescription('polyCom-300U device ObjectID')
polyCom_200U = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 8), ObjectIdentifier()).setLabel("polyCom-200U")
if mibBuilder.loadTexts: polyCom_200U.setStatus('current')
if mibBuilder.loadTexts: polyCom_200U.setDescription('polyCom-200U device ObjectID')
polyCom_200U_1Gb = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 9), ObjectIdentifier()).setLabel("polyCom-200U-1Gb")
if mibBuilder.loadTexts: polyCom_200U_1Gb.setStatus('current')
if mibBuilder.loadTexts: polyCom_200U_1Gb.setDescription('polyCom-200U-1Gb device ObjectID')
polyCom_300U_1Gb = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 10), ObjectIdentifier()).setLabel("polyCom-300U-1Gb")
if mibBuilder.loadTexts: polyCom_300U_1Gb.setStatus('current')
if mibBuilder.loadTexts: polyCom_300U_1Gb.setDescription('polyCom-300U-1Gb device ObjectID')
arlan_9000 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 11), ObjectIdentifier()).setLabel("arlan-9000")
if mibBuilder.loadTexts: arlan_9000.setStatus('current')
if mibBuilder.loadTexts: arlan_9000.setDescription('arlan-9000 device ObjectID')
arlan_1451 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 12), ObjectIdentifier()).setLabel("arlan-1451")
if mibBuilder.loadTexts: arlan_1451.setStatus('current')
if mibBuilder.loadTexts: arlan_1451.setDescription('arlan-1451 device ObjectID')
akmanai_500 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 13), ObjectIdentifier()).setLabel("akmanai-500")
if mibBuilder.loadTexts: akmanai_500.setStatus('current')
if mibBuilder.loadTexts: akmanai_500.setDescription('akmanai-500 device ObjectID')
polyCom_200U_1Gb_SFP = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 14), ObjectIdentifier()).setLabel("polyCom-200U-1Gb-SFP")
if mibBuilder.loadTexts: polyCom_200U_1Gb_SFP.setStatus('current')
if mibBuilder.loadTexts: polyCom_200U_1Gb_SFP.setDescription('polyCom-200U-1Gb-SFP device ObjectID')
polyCom_740 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15), ObjectIdentifier()).setLabel("polyCom-740")
if mibBuilder.loadTexts: polyCom_740.setStatus('current')
if mibBuilder.loadTexts: polyCom_740.setDescription('polyCom-740 device ObjectID')
polyCom_741 = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 16), ObjectIdentifier()).setLabel("polyCom-741")
if mibBuilder.loadTexts: polyCom_741.setStatus('current')
if mibBuilder.loadTexts: polyCom_741.setDescription('polyCom-741 device ObjectID')
polyCom_300U_1GT = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 17), ObjectIdentifier()).setLabel("polyCom-300U-1GT")
if mibBuilder.loadTexts: polyCom_300U_1GT.setStatus('current')
if mibBuilder.loadTexts: polyCom_300U_1GT.setDescription('polyCom-300U-1GT device ObjectID')
polygonRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 2))
polRemoteDescr = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteDescr.setStatus('current')
if mibBuilder.loadTexts: polRemoteDescr.setDescription("A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software.")
polRemoteObjectID = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteObjectID.setStatus('current')
if mibBuilder.loadTexts: polRemoteObjectID.setDescription("The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining `what kind of box' is being managed. For example, if vendor `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Fred Router'.")
polRemoteUpTime = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteUpTime.setStatus('current')
if mibBuilder.loadTexts: polRemoteUpTime.setDescription('The time (in hundredths of a second) since the network management portion of the system was last re-initialized.')
polRemoteContact = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polRemoteContact.setStatus('current')
if mibBuilder.loadTexts: polRemoteContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person. If no contact information is known, the value is the zero-length string.')
polRemoteName = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polRemoteName.setStatus('current')
if mibBuilder.loadTexts: polRemoteName.setDescription("An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name. If the name is unknown, the value is the zero-length string.")
polRemoteLocation = MibScalar((1, 3, 6, 1, 4, 1, 14885, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polRemoteLocation.setStatus('current')
if mibBuilder.loadTexts: polRemoteLocation.setDescription("The physical location of this node (e.g., `telephone closet, 3rd floor'). If the location is unknown, the value is the zero-length string.")
polygonRemoteType = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 3))
polRemoteTypes = MibScalar((1, 3, 6, 1, 4, 1, 14885, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("typeRemote", 1), ("typeChain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteTypes.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypes.setDescription('Type of MIBs tree propagation: 1 - remote MIBs tree copyed in local apparature, 2 - every apparature has your own MIBs tree')
polRemoteTypeCount = MibScalar((1, 3, 6, 1, 4, 1, 14885, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteTypeCount.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypeCount.setDescription('Number of all apparatures, connected to snmp-agent')
polRemoteTypeTable = MibTable((1, 3, 6, 1, 4, 1, 14885, 3, 3), )
if mibBuilder.loadTexts: polRemoteTypeTable.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypeTable.setDescription('A list of polRemoteType entries')
polRemoteTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 3, 3, 1), ).setIndexNames((0, "POLYGON-MIB", "polRemoteTypeLineIndex"))
if mibBuilder.loadTexts: polRemoteTypeEntry.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypeEntry.setDescription('An entry containing table of interface start index for each remote apparature.')
polRemoteTypeLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: polRemoteTypeLineIndex.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypeLineIndex.setDescription('Index of the type entry.')
polRemoteTypeInterfaceQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polRemoteTypeInterfaceQuantity.setStatus('current')
if mibBuilder.loadTexts: polRemoteTypeInterfaceQuantity.setDescription('Quantity of interfaces for correspondent apparatures.')
polygonTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 10))
pgs1 = MibTable((1, 3, 6, 1, 4, 1, 14885, 10, 20), )
if mibBuilder.loadTexts: pgs1.setStatus('current')
if mibBuilder.loadTexts: pgs1.setDescription('A list of PGS1 entries.')
pgs1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1), ).setIndexNames((0, "POLYGON-MIB", "pgs1LineIndex"))
if mibBuilder.loadTexts: pgs1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pgs1ConfigEntry.setDescription('An entry containing management information applicable to a particular interface.')
pgs1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pgs1LineIndex.setStatus('current')
if mibBuilder.loadTexts: pgs1LineIndex.setDescription('Index of the interface entry.')
pgs1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgs1IfIndex.setStatus('current')
if mibBuilder.loadTexts: pgs1IfIndex.setDescription('Index of the interface entry. Must be equal to pgs1LineIndex.')
pgs1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgs1CircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: pgs1CircuitIdentifier.setDescription('Circuit identifier.')
pgs1LoopBackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("pgs1NoLoop", 1), ("pgs1PayloadLoop", 2), ("pgs1InwardLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgs1LoopBackConfig.setStatus('current')
if mibBuilder.loadTexts: pgs1LoopBackConfig.setDescription('Loopback config.')
pgs1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgs1LineStatus.setStatus('current')
if mibBuilder.loadTexts: pgs1LineStatus.setDescription('Line status.')
pgs1LineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgs1LineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: pgs1LineStatusChangeTrapEnable.setDescription('Enable or disable trap sending for particular interface.')
pgs1LoopBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 20, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgs1LoopBackStatus.setStatus('current')
if mibBuilder.loadTexts: pgs1LoopBackStatus.setDescription('Loopback status.')
pgs1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 10, 20, 2))
pgs1LineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 14885, 10, 20, 2, 0, 1)).setObjects(("POLYGON-MIB", "pgs1LineStatus"))
if mibBuilder.loadTexts: pgs1LineStatusChange.setStatus('current')
if mibBuilder.loadTexts: pgs1LineStatusChange.setDescription('A pgs1LineStatusChange trap is sent when the value of an instance pgs1LineStatus changes.')
eth = MibTable((1, 3, 6, 1, 4, 1, 14885, 10, 21), )
if mibBuilder.loadTexts: eth.setStatus('current')
if mibBuilder.loadTexts: eth.setDescription('A list of ethernet entries.')
ethConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1), ).setIndexNames((0, "POLYGON-MIB", "ethLineIndex"))
if mibBuilder.loadTexts: ethConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ethConfigEntry.setDescription('An entry containing management information applicable to a particular interface.')
ethLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ethLineIndex.setStatus('current')
if mibBuilder.loadTexts: ethLineIndex.setDescription('Index of the interface entry.')
ethPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spd10", 1), ("spd100", 2), ("spd1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortSpeed.setStatus('current')
if mibBuilder.loadTexts: ethPortSpeed.setDescription('Ethernet speed mode.')
ethPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortMode.setStatus('current')
if mibBuilder.loadTexts: ethPortMode.setDescription('Ethernet filter mode.')
ethPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: ethPortAutonegotiation.setDescription('Autonegotiation mode.')
ethPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: ethPortFlowControl.setDescription('Flow control mode.')
ethPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 10, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("linkUp10", 1), ("linkUp100", 2), ("linkDown", 4), ("noModule", 8), ("linkUp1000", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortStatus.setStatus('current')
if mibBuilder.loadTexts: ethPortStatus.setDescription('Ethernet port state.')
ethTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 10, 21, 2))
ethLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 14885, 10, 21, 2, 0, 1)).setObjects(("POLYGON-MIB", "ethPortStatus"))
if mibBuilder.loadTexts: ethLineStatusChange.setStatus('current')
if mibBuilder.loadTexts: ethLineStatusChange.setDescription('A ethLineStatusChange trap is sent when the value of an instance ethPortStatus changes.')
polygonBridges = MibTable((1, 3, 6, 1, 4, 1, 14885, 20), )
if mibBuilder.loadTexts: polygonBridges.setStatus('current')
if mibBuilder.loadTexts: polygonBridges.setDescription('A list of bridge entries.')
bridgeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 20, 1), ).setIndexNames((0, "POLYGON-MIB", "bridgeIndex"))
if mibBuilder.loadTexts: bridgeConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeConfigEntry.setDescription('An entry containing management information applicable to a particular interface.')
bridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bridgeIndex.setStatus('current')
if mibBuilder.loadTexts: bridgeIndex.setDescription('Index of the interface entry.')
bridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableFiltering", 1), ("disableFiltering", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMode.setStatus('current')
if mibBuilder.loadTexts: bridgeMode.setDescription('Filtering mode.')
bridgeMACRefreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds30", 1), ("seconds300", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMACRefreshTime.setStatus('current')
if mibBuilder.loadTexts: bridgeMACRefreshTime.setDescription('MAC-address table refresh time.')
polygonAdmin = MibTable((1, 3, 6, 1, 4, 1, 14885, 100), )
if mibBuilder.loadTexts: polygonAdmin.setStatus('current')
if mibBuilder.loadTexts: polygonAdmin.setDescription('A list of administration entries.')
polAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 100, 1), ).setIndexNames((0, "POLYGON-MIB", "polAdmEntIndex"))
if mibBuilder.loadTexts: polAdmEntry.setStatus('current')
if mibBuilder.loadTexts: polAdmEntry.setDescription('An entry containing management information applicable to a particular device.')
polAdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 100, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: polAdmEntIndex.setStatus('current')
if mibBuilder.loadTexts: polAdmEntIndex.setDescription('Index of the administration entry.')
polAdmEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 100, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAdmEntAddr.setStatus('current')
if mibBuilder.loadTexts: polAdmEntAddr.setDescription('Local IP address.')
polAdmEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 100, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAdmEntNetMask.setStatus('current')
if mibBuilder.loadTexts: polAdmEntNetMask.setDescription('Netmask.')
polAdmEntGateWay = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 100, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polAdmEntGateWay.setStatus('current')
if mibBuilder.loadTexts: polAdmEntGateWay.setDescription('Gateway IP address.')
polygonSystem = MibTable((1, 3, 6, 1, 4, 1, 14885, 300), )
if mibBuilder.loadTexts: polygonSystem.setStatus('current')
if mibBuilder.loadTexts: polygonSystem.setDescription('A list of administration entries.')
polSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 300, 1), ).setIndexNames((0, "POLYGON-MIB", "polSysIndex"))
if mibBuilder.loadTexts: polSysEntry.setStatus('current')
if mibBuilder.loadTexts: polSysEntry.setDescription('An entry containing management information applicable to a particular device.')
polSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 300, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: polSysIndex.setStatus('current')
if mibBuilder.loadTexts: polSysIndex.setDescription('Index of the administration entry.')
polSysSound = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 300, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polSysSound.setStatus('current')
if mibBuilder.loadTexts: polSysSound.setDescription('System sound.')
polSysVersionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 300, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polSysVersionNum.setStatus('current')
if mibBuilder.loadTexts: polSysVersionNum.setDescription('Software version')
polSysSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14885, 300, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polSysSerialNum.setStatus('current')
if mibBuilder.loadTexts: polSysSerialNum.setDescription("Apparatire's serial number")
polygonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 5))
polygonCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 5, 3))
polygonGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 5, 4))
polygonCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14885, 5, 3, 1)).setObjects(("POLYGON-MIB", "polygonRemoteGroup"), ("POLYGON-MIB", "polygonPgs1Group"), ("POLYGON-MIB", "polygonEthGroup"), ("POLYGON-MIB", "polygonBridgeGroup"), ("POLYGON-MIB", "polygonAdminGroup"), ("POLYGON-MIB", "polygonSysGroup"), ("POLYGON-MIB", "polygonPgs1EventsGroup"), ("POLYGON-MIB", "polygonEthEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonCompliance = polygonCompliance.setStatus('current')
if mibBuilder.loadTexts: polygonCompliance.setDescription('The compliance statement for SNMP entities which implement this MIB module.')
polygonRemoteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 1)).setObjects(("POLYGON-MIB", "polRemoteDescr"), ("POLYGON-MIB", "polRemoteObjectID"), ("POLYGON-MIB", "polRemoteUpTime"), ("POLYGON-MIB", "polRemoteContact"), ("POLYGON-MIB", "polRemoteName"), ("POLYGON-MIB", "polRemoteLocation"), ("POLYGON-MIB", "polRemoteTypes"), ("POLYGON-MIB", "polRemoteTypeCount"), ("POLYGON-MIB", "polRemoteTypeInterfaceQuantity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonRemoteGroup = polygonRemoteGroup.setStatus('current')
if mibBuilder.loadTexts: polygonRemoteGroup.setDescription(' ')
polygonPgs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 2)).setObjects(("POLYGON-MIB", "pgs1IfIndex"), ("POLYGON-MIB", "pgs1CircuitIdentifier"), ("POLYGON-MIB", "pgs1LoopBackConfig"), ("POLYGON-MIB", "pgs1LineStatus"), ("POLYGON-MIB", "pgs1LineStatusChangeTrapEnable"), ("POLYGON-MIB", "pgs1LoopBackStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonPgs1Group = polygonPgs1Group.setStatus('current')
if mibBuilder.loadTexts: polygonPgs1Group.setDescription(' ')
polygonEthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 3)).setObjects(("POLYGON-MIB", "ethPortSpeed"), ("POLYGON-MIB", "ethPortMode"), ("POLYGON-MIB", "ethPortAutonegotiation"), ("POLYGON-MIB", "ethPortFlowControl"), ("POLYGON-MIB", "ethPortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonEthGroup = polygonEthGroup.setStatus('current')
if mibBuilder.loadTexts: polygonEthGroup.setDescription(' ')
polygonBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 4)).setObjects(("POLYGON-MIB", "bridgeMode"), ("POLYGON-MIB", "bridgeMACRefreshTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonBridgeGroup = polygonBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: polygonBridgeGroup.setDescription(' ')
polygonAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 5)).setObjects(("POLYGON-MIB", "polAdmEntAddr"), ("POLYGON-MIB", "polAdmEntNetMask"), ("POLYGON-MIB", "polAdmEntGateWay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonAdminGroup = polygonAdminGroup.setStatus('current')
if mibBuilder.loadTexts: polygonAdminGroup.setDescription(' ')
polygonSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 6)).setObjects(("POLYGON-MIB", "polSysSound"), ("POLYGON-MIB", "polSysVersionNum"), ("POLYGON-MIB", "polSysSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonSysGroup = polygonSysGroup.setStatus('current')
if mibBuilder.loadTexts: polygonSysGroup.setDescription(' ')
polygonPgs1EventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 7)).setObjects(("POLYGON-MIB", "pgs1LineStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonPgs1EventsGroup = polygonPgs1EventsGroup.setStatus('current')
if mibBuilder.loadTexts: polygonPgs1EventsGroup.setDescription('Notification group of polygon Pgs1 section')
polygonEthEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 14885, 5, 4, 8)).setObjects(("POLYGON-MIB", "ethLineStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    polygonEthEventsGroup = polygonEthEventsGroup.setStatus('current')
if mibBuilder.loadTexts: polygonEthEventsGroup.setDescription('Notification group of polygon Eth section')
mibBuilder.exportSymbols("POLYGON-MIB", pgs1LineStatusChange=pgs1LineStatusChange, polRemoteTypeEntry=polRemoteTypeEntry, polygonAdmin=polygonAdmin, polygonEthEventsGroup=polygonEthEventsGroup, polygonAdminGroup=polygonAdminGroup, polyCom_200U=polyCom_200U, polRemoteDescr=polRemoteDescr, polygonCompliance=polygonCompliance, bridgeIndex=bridgeIndex, polygonRemoteType=polygonRemoteType, polygonPgs1EventsGroup=polygonPgs1EventsGroup, polRemoteUpTime=polRemoteUpTime, bridgeConfigEntry=bridgeConfigEntry, polygonBridgeGroup=polygonBridgeGroup, akmanai_500=akmanai_500, pgs1LineStatusChangeTrapEnable=pgs1LineStatusChangeTrapEnable, ethPortFlowControl=ethPortFlowControl, polSysVersionNum=polSysVersionNum, ethLineIndex=ethLineIndex, arlan_9000=arlan_9000, polyCom_300U_1GT=polyCom_300U_1GT, polygonPgs1Group=polygonPgs1Group, ethConfigEntry=ethConfigEntry, polyCom_741=polyCom_741, polAdmEntry=polAdmEntry, pgs1LineIndex=pgs1LineIndex, polyCom_200T=polyCom_200T, ethPortAutonegotiation=ethPortAutonegotiation, pgs1Traps=pgs1Traps, polAdmEntNetMask=polAdmEntNetMask, polAdmEntGateWay=polAdmEntGateWay, polygon=polygon, polyCom_200U_1Gb_SFP=polyCom_200U_1Gb_SFP, polRemoteName=polRemoteName, ethPortSpeed=ethPortSpeed, pgs1LoopBackStatus=pgs1LoopBackStatus, polygonSystem=polygonSystem, polRemoteTypes=polRemoteTypes, ethPortStatus=ethPortStatus, polyCom_200M=polyCom_200M, arlan_1451=arlan_1451, rackControllerBlock_U_1=rackControllerBlock_U_1, polSysSerialNum=polSysSerialNum, polRemoteContact=polRemoteContact, polSysIndex=polSysIndex, pgs1CircuitIdentifier=pgs1CircuitIdentifier, polyCom_200U_1Gb=polyCom_200U_1Gb, polAdmEntAddr=polAdmEntAddr, polyCom_300U=polyCom_300U, polygonDevices=polygonDevices, polygonEthGroup=polygonEthGroup, polygonRemote=polygonRemote, polRemoteTypeCount=polRemoteTypeCount, polygonGroups=polygonGroups, eth=eth, polygonCompliances=polygonCompliances, polygonConformance=polygonConformance, polyCom_300U_1Gb=polyCom_300U_1Gb, pgs1=pgs1, polRemoteTypeInterfaceQuantity=polRemoteTypeInterfaceQuantity, pgs1LoopBackConfig=pgs1LoopBackConfig, polRemoteObjectID=polRemoteObjectID, pgs1ConfigEntry=pgs1ConfigEntry, polRemoteTypeLineIndex=polRemoteTypeLineIndex, ethTraps=ethTraps, polyCom_740=polyCom_740, polRemoteLocation=polRemoteLocation, polygonBridges=polygonBridges, PYSNMP_MODULE_ID=polygon, polyCom_300M=polyCom_300M, polSysEntry=polSysEntry, pgs1LineStatus=pgs1LineStatus, ethLineStatusChange=ethLineStatusChange, polyCom_300T=polyCom_300T, polygonSysGroup=polygonSysGroup, polSysSound=polSysSound, bridgeMACRefreshTime=bridgeMACRefreshTime, polygonRemoteGroup=polygonRemoteGroup, ethPortMode=ethPortMode, bridgeMode=bridgeMode, polAdmEntIndex=polAdmEntIndex, pgs1IfIndex=pgs1IfIndex, polygonTransmission=polygonTransmission, polRemoteTypeTable=polRemoteTypeTable, polyCom_200MK=polyCom_200MK)
