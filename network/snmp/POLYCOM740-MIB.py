#
# PySNMP MIB module POLYCOM740-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/vla/ArrestedDevelopment/pygwarts/development/filch/PolyCom-740-3.xx.mib
# Produced by pysmi-0.3.4 at Wed Jul 26 10:41:08 2023
# On host pcfrn3 platform Linux version 5.19.0-50-generic by user vla
# Using Python version 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, enterprises, Counter64, iso, IpAddress, ObjectIdentity, NotificationType, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Counter32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "Counter64", "iso", "IpAddress", "ObjectIdentity", "NotificationType", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Counter32", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
polygon = ModuleIdentity((1, 3, 6, 1, 4, 1, 14885))
if mibBuilder.loadTexts: polygon.setLastUpdated('0411261200Z')
if mibBuilder.loadTexts: polygon.setOrganization('JCS SIE Polygon ')
if mibBuilder.loadTexts: polygon.setContactInfo('Post code 450000, Ufa-Center, Karl Marks st. 37, bild 1, 5 flow')
if mibBuilder.loadTexts: polygon.setDescription('The MIB module to describe Polycom 740')
polygonDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 200))
polyCom_740 = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 200, 15)).setLabel("polyCom-740")
polyCom_740_system = MibIdentifier((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1)).setLabel("polyCom-740-system")
sound_alarm = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("sound-alarm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sound_alarm.setStatus('current')
if mibBuilder.loadTexts: sound_alarm.setDescription('Sound alarm control')
e1_section = MibTable((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1), ).setLabel("e1-section")
if mibBuilder.loadTexts: e1_section.setStatus('current')
if mibBuilder.loadTexts: e1_section.setDescription('A list of E1 entries.')
e1_section_state = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1), ).setLabel("e1-section-state").setIndexNames((0, "POLYCOM740-MIB", "e1-LineIndex"))
if mibBuilder.loadTexts: e1_section_state.setStatus('current')
if mibBuilder.loadTexts: e1_section_state.setDescription('An entry containing management information applicable to a particular interface.')
e1_LineIndex = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 1), InterfaceIndex()).setLabel("e1-LineIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_LineIndex.setStatus('current')
if mibBuilder.loadTexts: e1_LineIndex.setDescription('Port number in table of interface')
e1_IfIndex = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 2), InterfaceIndex()).setLabel("e1-IfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_IfIndex.setStatus('current')
if mibBuilder.loadTexts: e1_IfIndex.setDescription('Port number')
e1_guid = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 3), Integer32()).setLabel("e1-guid").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_guid.setStatus('current')
if mibBuilder.loadTexts: e1_guid.setDescription('Port group')
e1_pgid = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 4), Integer32()).setLabel("e1-pgid").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_pgid.setStatus('current')
if mibBuilder.loadTexts: e1_pgid.setDescription('Port group id')
e1_func = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("station", 0), ("main", 1), ("reserved", 2)))).setLabel("e1-func").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_func.setStatus('current')
if mibBuilder.loadTexts: e1_func.setDescription('Port function')
e1_fault = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 64))).clone(namedValues=NamedValues(("normal", 1), ("ais", 8), ("los", 64)))).setLabel("e1-fault").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_fault.setStatus('current')
if mibBuilder.loadTexts: e1_fault.setDescription('Port state')
e1_es = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 7), Integer32()).setLabel("e1-es").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_es.setStatus('current')
if mibBuilder.loadTexts: e1_es.setDescription('Port es counter')
e1_ses = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 8), Integer32()).setLabel("e1-ses").setMaxAccess("readonly")
if mibBuilder.loadTexts: e1_ses.setStatus('current')
if mibBuilder.loadTexts: e1_ses.setDescription('Port ses counter')
e1_loop = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("off", 1), ("payload", 2), ("inward", 5)))).setLabel("e1-loop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1_loop.setStatus('current')
if mibBuilder.loadTexts: e1_loop.setDescription('Loopback status for current port: 1 - loopback off 2 - payload loopback 5 - inward loopback')
e1_sp = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 1, 1, 10), Integer32()).setLabel("e1-sp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1_sp.setStatus('current')
if mibBuilder.loadTexts: e1_sp.setDescription('Source port id')
group_section = MibTable((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2), ).setLabel("group-section")
if mibBuilder.loadTexts: group_section.setStatus('current')
if mibBuilder.loadTexts: group_section.setDescription('A list of E1 group entries.')
group_section_state = MibTableRow((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1), ).setLabel("group-section-state").setIndexNames((0, "POLYCOM740-MIB", "group-guid"))
if mibBuilder.loadTexts: group_section_state.setStatus('current')
if mibBuilder.loadTexts: group_section_state.setDescription('An entry containing management information applicable to a particular interface.')
group_guid = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 1), InterfaceIndex()).setLabel("group-guid").setMaxAccess("readonly")
if mibBuilder.loadTexts: group_guid.setStatus('current')
if mibBuilder.loadTexts: group_guid.setDescription('Group number')
group_as = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("group-as").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_as.setStatus('current')
if mibBuilder.loadTexts: group_as.setDescription('Auto switching mode')
group_qs = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("group-qs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_qs.setStatus('current')
if mibBuilder.loadTexts: group_qs.setDescription('Quality switch mode')
group_lsm = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("group-lsm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_lsm.setStatus('current')
if mibBuilder.loadTexts: group_lsm.setDescription('Line switch mode')
group_lt = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 9))).clone(namedValues=NamedValues(("framed", 4), ("unframed", 9)))).setLabel("group-lt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_lt.setStatus('current')
if mibBuilder.loadTexts: group_lt.setDescription('Line type')
group_acm = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("group-acm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_acm.setStatus('current')
if mibBuilder.loadTexts: group_acm.setDescription('Absolute compare mode')
group_ivl = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setLabel("group-ivl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_ivl.setStatus('current')
if mibBuilder.loadTexts: group_ivl.setDescription('Error counting interval')
group_lim = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setLabel("group-lim").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_lim.setStatus('current')
if mibBuilder.loadTexts: group_lim.setDescription('Error limit')
group_qc = MibScalar((1, 3, 6, 1, 4, 1, 14885, 200, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("es", 1), ("ses", 2)))).setLabel("group-qc").setMaxAccess("readwrite")
if mibBuilder.loadTexts: group_qc.setStatus('current')
if mibBuilder.loadTexts: group_qc.setDescription('Quality criteria')
mibBuilder.exportSymbols("POLYCOM740-MIB", polygon=polygon, group_ivl=group_ivl, e1_guid=e1_guid, e1_es=e1_es, e1_IfIndex=e1_IfIndex, e1_section=e1_section, group_section=group_section, polygonDevices=polygonDevices, group_qs=group_qs, polyCom_740_system=polyCom_740_system, group_guid=group_guid, e1_section_state=e1_section_state, group_lim=group_lim, group_acm=group_acm, PYSNMP_MODULE_ID=polygon, group_section_state=group_section_state, group_lsm=group_lsm, polyCom_740=polyCom_740, sound_alarm=sound_alarm, e1_LineIndex=e1_LineIndex, group_as=group_as, e1_sp=e1_sp, group_lt=group_lt, e1_fault=e1_fault, e1_pgid=e1_pgid, group_qc=group_qc, e1_ses=e1_ses, e1_loop=e1_loop, e1_func=e1_func)
